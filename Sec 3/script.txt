Alright so before we jump back into our app, lets talk about compoinents. When you start building react apps, you want to think of your user interface or website as a bunch of components. Components are encapuslated entities that can have their own state, peopreties, styling and output. So lets look at twitter.com for example. Therea a lot going on here but think of each block as a component.

We have the top navbar which can be looked at as a component we have the status input which could be a component, the main feed, the who to follow, maybe this is the stats component and the trens component. and then the statis component may have some state attached to it like tweetsm following and followers obviously specific to the user. This data would pulled from some backend with a database but its being displayed here in the view. Now everything that ive mentioned is basically top level component, you could also have this search box in the navbar as a component, each post i the feed, its own component, each person to follow, its own component. And everyone constructs component trees differently, but the point here is to start thinking of uis as components.

Now in many cases youll need toshare state, for instance we may need to access our tweet number right here, somewhere else, in that case you may want to move that state to the application instead of just this one component, thats where redux comes in. You store data in something called a redux store and then you can access it from your indivudual components. That way you can spread your data all around. We also have something called the contentxt API which is very helpful but were not gonna get into either of those until l.ater ,but the point here is to start thinking of user interfaces and websites as having individual components. Thats the essence of react. And if youve worked with other frameworks like angular or vue, you proibably already understanbd this concept.So heading back to our application, all we have is the app component which is the core or root component of the application, any other components we cvreate will go into this one. Even when we use the react router later on, the routes will go inside here as well along with a path to accees them.

Now creating a comopnent is pretty easy, it can be a function or a class. However if you component is gonna use state, then you want it to ba a class, functional components are used for stateless or dumb components. But dont worry about that just yet, well get into state later. But if we look at how this app component is constructed, we first bring in react and the main Component class. the reason react doesnt have any curly braces is becase its the default export, remember we talked about that briefly in the es6 video. Now technically you dont have to bring in component, because we already have React and its part of that so we could delete it and just use React.component which you may see but this is the more common way to do it.

Were also importing ap.css which is empty right now but this is opur global stylesheet. You can apply inline styling with react as well which ill get into later.

Then we have our class and name which extens the main react component class. All component classes should extend this class. This gives us a bunch of methods to work with. One of thoise methoids is render, which is respoinsible for just that, rendering the component into the dom. in here is what looks like html but its actually something called jsx which ill get into in the next video.

Then down here were just exporting the class name.

So all in all a basic component is really easy to create. Well be creating our own and impoorting them in a little bit. But first I wanna talk alittle bit about jsx. So ill see you in the next video.